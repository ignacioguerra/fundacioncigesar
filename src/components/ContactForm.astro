---
import ScrollContext from "./snippets/ScrollContext.astro"

interface Props {
	web3formsAccessKey:string;
	formName:string;
	subjectText?:string;
	sendButtonText?:string;
	nameFieldDisplayText?:string;
	phoneFieldDisplayText?:string;
	emailFieldDisplayText?:string;
	messageFieldDisplayText?:string;
	feedbackSendingMessage?:string;
	feedbackSendSuccessMessage?:string;
	feedbackSendErrorMessage?:string;
}

const {
	web3formsAccessKey,
	formName,
	subjectText = 'Contacto Web: Nuevo mensaje recibido',
	sendButtonText = 'Enviar',
	nameFieldDisplayText = 'Nombre',
	phoneFieldDisplayText = 'Teléfono',
	emailFieldDisplayText = 'Correo electrónico',
	messageFieldDisplayText = 'Consulta',
	feedbackSendingMessage = 'Enviando...',
	feedbackSendSuccessMessage = 'Mensaje enviado.',
	feedbackSendErrorMessage = 'Error al enviar el mensaje. Intente nuevamente o escríbanos a ',
} = Astro.props;

---

<div class="contact-form">
	<form id="contact-form" class="contact-form__form" action="https://api.web3forms.com/submit" method="POST">
		<input type="hidden" name="access_key" value={web3formsAccessKey}>
		<input type="hidden" name="subject" value={subjectText} id="contact-subject">
		<input type="hidden" name="from_name" value={formName}>
		<ScrollContext>
			<input class="sc-activable" placeholder={`${nameFieldDisplayText}*`} type="text" name={nameFieldDisplayText} id="contact-full-name" required>
		</ScrollContext>
		<ScrollContext>
			<input class="sc-activable" placeholder={phoneFieldDisplayText} type="text" name={phoneFieldDisplayText} id="contact-full-name">
		</ScrollContext>
		<ScrollContext>
			<input class="sc-activable" placeholder={`${emailFieldDisplayText}*`} type="email" name="email" id="contact-email" required>
		</ScrollContext>
		<ScrollContext>
			<textarea class="sc-activable" placeholder={`${messageFieldDisplayText}*`} name={messageFieldDisplayText} id="contact-message" rows="10" required></textarea>
		</ScrollContext>
		{/*<ScrollContext>
			<div class="contact-form__captcha sc-activable h-captcha" data-captcha="true"></div>*/}
			<input type="checkbox" name="botcheck" class="hidden" style="display: none;">
			<input type="hidden" name="Enviado desde" value="" id="contact-from-url">
		{ /*</ScrollContext>*/ }
		<ScrollContext>
			<div class="contact-form__send sc-activable">
				<button class="contact-form__send__button sc-activable"><span>{sendButtonText}</span></button>
				<p class="contact-form__send__feedback" id="contact-feedback"></p>
			</div>
		</ScrollContext>
	</form>
</div>
<script src="https://web3forms.com/client/script.js" async defer></script>
<script define:vars={{ feedbackSendingMessage, feedbackSendSuccessMessage, feedbackSendErrorMessage }}>
	const form = document.getElementById('contact-form')
	const formResult = document.getElementById('contact-feedback')
	const fieldFromUrl = document.getElementById('contact-from-url')
	
	form.addEventListener('submit', function(e) {
		e.preventDefault()
		fieldFromUrl.value = window.location.origin
		const formData = new FormData(form)
		const object = Object.fromEntries(formData)
		// object['subject'] = `Nuevo mensaje de ${object['full-name']}`
		const json = JSON.stringify(object)

		const linkMailto = document.createElement('a')
		const email = ['info','@','fundacioncigesar.org.ar',].join()
		linkMailto.href = `mailto:${email}?subject=${encodeURI(object['subject'])}&body=${encodeURI(object['message'])}`
		linkMailto.textContent = email

		formResult.textContent = feedbackSendingMessage
	
		fetch('https://api.web3forms.com/submit', {
			method: 'POST',
				headers: {
				'Content-Type': 'application/json',
				'Accept': 'application/json'
			},
			body: json
		})
		.then(async (response) => {
			let json = await response.json()
			if (response.status == 200) {
				form.reset()
				formResult.textContent = feedbackSendSuccessMessage
				setTimeout(() => {
					formResult.textContent = ''
				}, 6000)
			} else {
				formResult.textContent = feedbackSendErrorMessage
				formResult.append(linkMailto)
			}
		})
		.catch(error => {
			formResult.textContent = feedbackSendErrorMessage
			formResult.append(linkMailto)
		})
	})
	</script>

<style>
	.contact-form {
		&__form {
			display: flex;
			flex-direction: column;
			gap: 1.5625rem;

			@media screen and (max-width: 575px) {
				gap: 1.0625rem;
			}
		}
		input, textarea, button, &__captcha {
			opacity: 0;
			transform: translateY(50px);
			&.sc-was-active {
				transition: opacity 800ms ease-in-out, transform 800ms ease-out;
				opacity: 1;
				transform: none;
			}
		}
		
		input, textarea, button {
			display: block;
			width: 100%;
			font-family: var(--font-fammily);
			font-size: 1.25rem;
			font-weight: var(--font-weight-light);
			padding: 0.625em 1.5625rem;
			margin: 0;
			border: 1px solid var(--page-primary-color);
			background-color: var(--color-light);

			&::placeholder {
				opacity: 1;
			}
			
			@media screen and (max-width: 1399px) {
				font-size: 1.0625rem;
			}
			@media screen and (max-width: 1199px) {
				font-size: 1.1875rem;
			}
			@media screen and (max-width: 767px) {
				font-size: 1rem;
			}
			@media screen and (max-width: 575px) {
				font-size: 0.875rem;
				padding: 0.75em 1rem;
			}
		}
		textarea {
			resize: vertical;
		}

		&__send {
			display: flex;
			gap: 1.5625rem;
			align-items: center;
			& &__button {
				background-color: var(--color-accent-1);
				color: var(--color-white);
				width: auto;
				min-width: 25%;
				cursor: pointer;
				position: relative;
				
				span {
					position: relative;
				}

				&::before {
					content: "";
					display: block;
					position: absolute;
					top: 0;
					right: 0;
					bottom: 0;
					left: 0;
					background-color: var(--color-white);
					z-index: 0;
					opacity: 0;
					transform: translateY(-0.5rem) scaleY(.25);
					transition: transform 100ms ease-out, opacity 100ms ease-out;
				}
				&:hover {
					&::before {
						animation: background-in 200ms ease-out;
						opacity: 1;
						transform: none;
					}
					@keyframes background-in {
						from { transform: translateY(0.5rem) scaleY(.25); opacity: 0; filter: blurY(10px); }
						50% {  transform: translateY(0.25rem); opacity: 1; }
						to { transform: none; }
					}
					span {
						color: var(--color-accent-1);
					}
				}
			}
			&__feedback {
				color: var(--color-accent-1);
				margin: 0;
				&:empty {
					display: none;
				}
				a {
					color: inherit;
				}
				@media screen and (max-width: 1399px) {
					font-size: 1.0625rem;
				}
				@media screen and (max-width: 1199px) {
					font-size: 1.1875rem;
				}
				@media screen and (max-width: 767px) {
					font-size: 1rem;
				}
				@media screen and (max-width: 575px) {
					font-size: 0.8125rem;
				}
			}
		}
	}
</style>
